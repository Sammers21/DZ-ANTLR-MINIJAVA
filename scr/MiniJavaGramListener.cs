//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniJavaGram.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniJavaGramParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public interface IMiniJavaGramListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] MiniJavaGramParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] MiniJavaGramParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.classBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassBody([NotNull] MiniJavaGramParser.ClassBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.classBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassBody([NotNull] MiniJavaGramParser.ClassBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.enumdeclar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumdeclar([NotNull] MiniJavaGramParser.EnumdeclarContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.enumdeclar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumdeclar([NotNull] MiniJavaGramParser.EnumdeclarContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMain([NotNull] MiniJavaGramParser.MainContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMain([NotNull] MiniJavaGramParser.MainContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.otherMthod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOtherMthod([NotNull] MiniJavaGramParser.OtherMthodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.otherMthod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOtherMthod([NotNull] MiniJavaGramParser.OtherMthodContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgs([NotNull] MiniJavaGramParser.ArgsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgs([NotNull] MiniJavaGramParser.ArgsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.exprassion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprassion([NotNull] MiniJavaGramParser.ExprassionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.exprassion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprassion([NotNull] MiniJavaGramParser.ExprassionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.arraydeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArraydeclaration([NotNull] MiniJavaGramParser.ArraydeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.arraydeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArraydeclaration([NotNull] MiniJavaGramParser.ArraydeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.varible"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarible([NotNull] MiniJavaGramParser.VaribleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.varible"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarible([NotNull] MiniJavaGramParser.VaribleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.doubleVal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoubleVal([NotNull] MiniJavaGramParser.DoubleValContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.doubleVal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoubleVal([NotNull] MiniJavaGramParser.DoubleValContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.doubleArr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoubleArr([NotNull] MiniJavaGramParser.DoubleArrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.doubleArr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoubleArr([NotNull] MiniJavaGramParser.DoubleArrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator([NotNull] MiniJavaGramParser.OperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator([NotNull] MiniJavaGramParser.OperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] MiniJavaGramParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] MiniJavaGramParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.stringArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringArgs([NotNull] MiniJavaGramParser.StringArgsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.stringArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringArgs([NotNull] MiniJavaGramParser.StringArgsContext context);
}
