//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniJavaGram.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniJavaGramListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MiniJavaGramBaseListener : IMiniJavaGramListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] MiniJavaGramParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] MiniJavaGramParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.classBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassBody([NotNull] MiniJavaGramParser.ClassBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.classBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassBody([NotNull] MiniJavaGramParser.ClassBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.enumdeclar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumdeclar([NotNull] MiniJavaGramParser.EnumdeclarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.enumdeclar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumdeclar([NotNull] MiniJavaGramParser.EnumdeclarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.main"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMain([NotNull] MiniJavaGramParser.MainContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.main"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMain([NotNull] MiniJavaGramParser.MainContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.otherMthod"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOtherMthod([NotNull] MiniJavaGramParser.OtherMthodContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.otherMthod"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOtherMthod([NotNull] MiniJavaGramParser.OtherMthodContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgs([NotNull] MiniJavaGramParser.ArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgs([NotNull] MiniJavaGramParser.ArgsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.exprassion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprassion([NotNull] MiniJavaGramParser.ExprassionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.exprassion"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprassion([NotNull] MiniJavaGramParser.ExprassionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.arraydeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArraydeclaration([NotNull] MiniJavaGramParser.ArraydeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.arraydeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArraydeclaration([NotNull] MiniJavaGramParser.ArraydeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.varible"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarible([NotNull] MiniJavaGramParser.VaribleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.varible"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarible([NotNull] MiniJavaGramParser.VaribleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.doubleVal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleVal([NotNull] MiniJavaGramParser.DoubleValContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.doubleVal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleVal([NotNull] MiniJavaGramParser.DoubleValContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.doubleArr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleArr([NotNull] MiniJavaGramParser.DoubleArrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.doubleArr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleArr([NotNull] MiniJavaGramParser.DoubleArrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperator([NotNull] MiniJavaGramParser.OperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperator([NotNull] MiniJavaGramParser.OperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] MiniJavaGramParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] MiniJavaGramParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniJavaGramParser.stringArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringArgs([NotNull] MiniJavaGramParser.StringArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniJavaGramParser.stringArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringArgs([NotNull] MiniJavaGramParser.StringArgsContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
